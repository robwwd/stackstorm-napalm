input {
  udp {
    port => 6969
    codec => "json"
    type => "rsyslog"
  }
}

filter {

  # Strip down the logsource to correct hostname (Juniper routers tag the
  # routing engine on the end for example.)
  mutate {
    gsub => [
            "logsource", "-re\d", "",
            "logsource", "lo0-", "",
            "logsource", "vl\d+-", ""
            ]
    # Remove leading whitespace from message.
    strip => ["message"]
  }

  grok {
    # Cisco IOS XR log file messages, remove the timestamp, extract the process and pid.
    match => { "message" => "%{CISCOTIMESTAMP} : %{NOTSPACE:program}\[%{NOTSPACE:pid}\]: %%{NOTSPACE:cisco_tag} : %{GREEDYDATA:message}" }
    # Cisco IOS log file messages, remove the timestamp, extract the process and pid.
    match => { "message" => "%{NOTSPACE:pid}: %{CISCOTIMESTAMP}: %%{NOTSPACE:cisco_tag}: %{GREEDYDATA:message}" }
    # Juniper logs where a virtual router name gets parsed into program by mistake.
    match => { "message" => "%{NOTSPACE:program}\[%{NOTSPACE:pid}\]: %{GREEDYDATA:message}" }
    overwrite => [ "message", "program", "pid" ]
  }

  # Handle Interface Down syslogs
  #
  grok {
    match   => { "message" => [ "Interface %{NOTSPACE:interface}, changed state to [Dd]own",
                                "SNMP_TRAP_LINK_DOWN: ifIndex %{INT}, ifAdminStatus (up|down)\(%{INT}\), ifOperStatus down\(%{INT}\), ifName %{NOTSPACE:interface}"
                              ]
                }
    add_tag => ["interface_down", "interface"]
  }

  grok {
    match   => { "message" => "Interface %{NOTSPACE:interface}, changed state to [Uu]p" }
    add_tag => ["interface_up", "interface"]
  }

  # Handle the BGP prefix exceeded trigger.
  grok {
    match     => { "message" => "BGP_PREFIX_THRESH_EXCEEDED: %{IPV4:neighbour} \(External AS %{INT:asnum}\): Configured maximum prefix-limit threshold\(%{INT}\) exceeded for inet-unicast nlri: %{INT:prefixes}" }
    add_tag   => ["prefix_exceeded"]
    add_field => { "os_type" => "junos" }
  }

  # Handle configuration changes, one per device type.
  #

  # JunOS configuration changes.
  grok {
    match     => { "message" => "UI_COMMIT: User '%{USERNAME:username}' requested 'commit' operation \(comment: %{NOTSPACE:comment}\)" }
    add_tag   => ["configuration_change"]
    add_field => { "os_type" => "junos" }
  }

  # IOS-XR configuration changes.
  grok {
    match     => { "message" => "Configuration committed by user '%{USERNAME:username}'. Use 'show configuration commit changes %{INT:commit_id}' to view the changes" }
    add_tag   => ["configuration_change"]
    add_field => { "os_type" => "iosxr" }
  }

  # Configuration changes on IOS devices.
  # Check the tag here otherwise two events will be fired for IOS-XR devices.
  if [cisco_tag] == "SYS-5-CONFIG_I" {
    grok {
      match     => { "message" => "Configured from console by %{USERNAME:username} on " }
      add_tag   => ["configuration_change"]
      add_field => { "os_type" => "ios" }
    }
  }

  mutate {
    remove_tag => [ "_grokparsefailure" ]
  }
}

output {
  elasticsearch {
    hosts => [ "localhost:9200" ]
  }

  # Output to Stackstorm Webhooks. Stackstorm is running on the same host here,
  # change the URL for your own host. Uncomment as needed.

  # BGP Syslog.

  #if "prefix_exceeded" in [tags] {
  #  http {
  #    url => "http://localhost:9101/v1/webhooks/napalm_bgp_prefix_exceeded"
  #    http_method => "post"
  #    headers => ["St2-Api-Key", "MjVlYTFlYjUzMTYyMDEyYWY3ZTRkNDJmNz222DM3NTVmYTFiYTlmMThkYTE0YmY2NzI2MzI5ODM3MDZkMzNhYg"]
  #  }
  #}

  # Configuration Change

  #if "configuration_change" in [tags] {
  #  http {
  #    url => "http://localhost:9101/v1/webhooks/napalm_conf_change"
  #    http_method => "post"
  #    headers => ["St2-Api-Key", "MjVlYTFlYjUzMTYyMDEyYWY3ZTRkNDJmNz222DM3NTVmYTFiYTlmMThkYTE0YmY2NzI2MzI5ODM3MDZkMzNhYg"]
  #  }
  #}

  # Interface goes down.

  #if "interface_down" in [tags] {
  #  http {
  #    url => "http://localhost:9101/v1/webhooks/napalm_interface_down"
  #    http_method => "post"
  #    headers => ["St2-Api-Key", "MjVlYTFlYjUzMTYyMDEyYWY3ZTRkNDJmNz222DM3NTVmYTFiYTlmMThkYTE0YmY2NzI2MzI5ODM3MDZkMzNhYg"]
  #  }
  #}

# Enable for debugging
#  file {
#    path => "/var/log/logstash/syslog.log"
#  }
}
